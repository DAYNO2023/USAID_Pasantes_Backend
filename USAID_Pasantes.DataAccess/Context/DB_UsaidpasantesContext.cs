// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using USAID_Pasantes.DataAccess;
using USAID_Pasantes.Entities.Entities;

#nullable disable

namespace USAID_Pasantes.DataAccess.Context
{
    public partial class DB_UsaidpasantesContext : DbContext
    {
        public DB_UsaidpasantesContext()
        {
        }

        public DB_UsaidpasantesContext(DbContextOptions<DB_UsaidpasantesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<TbActividades> TbActividades { get; set; }
        public virtual DbSet<TbActividadesPorOptante> TbActividadesPorOptante { get; set; }
        public virtual DbSet<TbBancos> TbBancos { get; set; }
        public virtual DbSet<TbBeneficios> TbBeneficios { get; set; }
        public virtual DbSet<TbBeneficiosPorOptante> TbBeneficiosPorOptante { get; set; }
        public virtual DbSet<TbCarreraPorFacultadPorRegional> TbCarreraPorFacultadPorRegional { get; set; }
        public virtual DbSet<TbCarreras> TbCarreras { get; set; }
        public virtual DbSet<TbComponentes> TbComponentes { get; set; }
        public virtual DbSet<TbComponentesPorRegionalPorEmpleado> TbComponentesPorRegionalPorEmpleado { get; set; }
        public virtual DbSet<TbCuestionarios> TbCuestionarios { get; set; }
        public virtual DbSet<TbDepartamentos> TbDepartamentos { get; set; }
        public virtual DbSet<TbDiscusiones> TbDiscusiones { get; set; }
        public virtual DbSet<TbDocumentos> TbDocumentos { get; set; }
        public virtual DbSet<TbDocumentosImagenesPorDiscusion> TbDocumentosImagenesPorDiscusion { get; set; }
        public virtual DbSet<TbDocumentosOptantes> TbDocumentosOptantes { get; set; }
        public virtual DbSet<TbEmpleados> TbEmpleados { get; set; }
        public virtual DbSet<TbEmpleadosPorActividad> TbEmpleadosPorActividad { get; set; }
        public virtual DbSet<TbEmpresas> TbEmpresas { get; set; }
        public virtual DbSet<TbEstadosCiviles> TbEstadosCiviles { get; set; }
        public virtual DbSet<TbFacultadPorRegional> TbFacultadPorRegional { get; set; }
        public virtual DbSet<TbFacultades> TbFacultades { get; set; }
        public virtual DbSet<TbForos> TbForos { get; set; }
        public virtual DbSet<TbForosPorActividad> TbForosPorActividad { get; set; }
        public virtual DbSet<TbForosPorEmpleados> TbForosPorEmpleados { get; set; }
        public virtual DbSet<TbHojaTiempo> TbHojaTiempo { get; set; }
        public virtual DbSet<TbHojaTiempoPorOptante> TbHojaTiempoPorOptante { get; set; }
        public virtual DbSet<TbHojaTiempoPorOptanteBitacora> TbHojaTiempoPorOptanteBitacora { get; set; }
        public virtual DbSet<TbModulos> TbModulos { get; set; }
        public virtual DbSet<TbModulosPorRoles> TbModulosPorRoles { get; set; }
        public virtual DbSet<TbMunicipios> TbMunicipios { get; set; }
        public virtual DbSet<TbNotificaciones> TbNotificaciones { get; set; }
        public virtual DbSet<TbNotificacionesPorUsuario> TbNotificacionesPorUsuario { get; set; }
        public virtual DbSet<TbOpcionesPorPregunta> TbOpcionesPorPregunta { get; set; }
        public virtual DbSet<TbOptantes> TbOptantes { get; set; }
        public virtual DbSet<TbOptantesBitacora> TbOptantesBitacora { get; set; }
        public virtual DbSet<TbPreguntasFrecuentes> TbPreguntasFrecuentes { get; set; }
        public virtual DbSet<TbPreguntasPorCuestionario> TbPreguntasPorCuestionario { get; set; }
        public virtual DbSet<TbProyectos> TbProyectos { get; set; }
        public virtual DbSet<TbPuestos> TbPuestos { get; set; }
        public virtual DbSet<TbRecibos> TbRecibos { get; set; }
        public virtual DbSet<TbRecibosPorOptante> TbRecibosPorOptante { get; set; }
        public virtual DbSet<TbRegionalCorporativa> TbRegionalCorporativa { get; set; }
        public virtual DbSet<TbRegionales> TbRegionales { get; set; }
        public virtual DbSet<TbRespuestasPorOptante> TbRespuestasPorOptante { get; set; }
        public virtual DbSet<TbRoles> TbRoles { get; set; }
        public virtual DbSet<TbTipoDocumento> TbTipoDocumento { get; set; }
        public virtual DbSet<TbTipoSangre> TbTipoSangre { get; set; }
        public virtual DbSet<TbTokens> TbTokens { get; set; }
        public virtual DbSet<TbUniversidades> TbUniversidades { get; set; }
        public virtual DbSet<TbUsuarios> TbUsuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<TbActividades>(entity =>
            {
                entity.HasKey(e => e.ActiId)
                    .HasName("PK__tbActivi__9B1042C3AD6B5218");

                entity.ToTable("tbActividades", "Gest");

                entity.Property(e => e.ActiId).HasColumnName("acti_Id");

                entity.Property(e => e.ActiDescripcionActividad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("acti_DescripcionActividad");

                entity.Property(e => e.ActiDireccionExacta)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("acti_DireccionExacta");

                entity.Property(e => e.ActiEstado)
                    .HasColumnName("acti_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ActiFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("acti_FechaCreacion");

                entity.Property(e => e.ActiFechaFinal)
                    .HasColumnType("date")
                    .HasColumnName("acti_FechaFinal");

                entity.Property(e => e.ActiFechaInicio)
                    .HasColumnType("date")
                    .HasColumnName("acti_FechaInicio");

                entity.Property(e => e.ActiFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("acti_FechaModificacion");

                entity.Property(e => e.ActiHoras).HasColumnName("acti_Horas");

                entity.Property(e => e.ActiNombreActividad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("acti_NombreActividad");

                entity.Property(e => e.ActiPresencialOvirtual).HasColumnName("acti_PresencialOVirtual");

                entity.Property(e => e.ActiUsuarioCreacion).HasColumnName("acti_UsuarioCreacion");

                entity.Property(e => e.ActiUsuarioModificacion).HasColumnName("acti_UsuarioModificacion");

                entity.Property(e => e.CompId).HasColumnName("comp_Id");

                entity.Property(e => e.MuniId)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("muni_Id");

                entity.HasOne(d => d.ActiUsuarioCreacionNavigation)
                    .WithMany(p => p.TbActividadesActiUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.ActiUsuarioCreacion)
                    .HasConstraintName("FK_tbActividades_Accs_tbUsuarios_acti_UsuarioCreacion");

                entity.HasOne(d => d.ActiUsuarioModificacionNavigation)
                    .WithMany(p => p.TbActividadesActiUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.ActiUsuarioModificacion)
                    .HasConstraintName("FK_tbActividades_Accs_tbUsuarios_acti_UsuarioModificacion");

                entity.HasOne(d => d.Comp)
                    .WithMany(p => p.TbActividades)
                    .HasForeignKey(d => d.CompId);

                entity.HasOne(d => d.Muni)
                    .WithMany(p => p.TbActividades)
                    .HasForeignKey(d => d.MuniId)
                    .HasConstraintName("FK_tbActividades_Gral_tbMunicipios_muni_Id");
            });

            modelBuilder.Entity<TbActividadesPorOptante>(entity =>
            {
                entity.HasKey(e => e.AcpeId)
                    .HasName("PK__tbActivi__8F690CFF17883CFA");

                entity.ToTable("tbActividadesPorOptante", "Gest");

                entity.Property(e => e.AcpeId).HasColumnName("acpe_Id");

                entity.Property(e => e.AcpeEstado)
                    .HasColumnName("acpe_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AcpeFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("acpe_FechaCreacion");

                entity.Property(e => e.AcpeFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("acpe_FechaModificacion");

                entity.Property(e => e.AcpeHorasCumplidas).HasColumnName("acpe_HorasCumplidas");

                entity.Property(e => e.AcpeObservacion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("acpe_Observacion");

                entity.Property(e => e.AcpeUsuarioCreacion).HasColumnName("acpe_UsuarioCreacion");

                entity.Property(e => e.AcpeUsuarioModificacion).HasColumnName("acpe_UsuarioModificacion");

                entity.Property(e => e.ActiId).HasColumnName("acti_Id");

                entity.Property(e => e.OptaId).HasColumnName("opta_Id");

                entity.HasOne(d => d.AcpeUsuarioCreacionNavigation)
                    .WithMany(p => p.TbActividadesPorOptanteAcpeUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.AcpeUsuarioCreacion)
                    .HasConstraintName("FK_tbActividadPorOptante_Accs_tbUsuarios_acpe_UsuarioCreacion");

                entity.HasOne(d => d.AcpeUsuarioModificacionNavigation)
                    .WithMany(p => p.TbActividadesPorOptanteAcpeUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.AcpeUsuarioModificacion)
                    .HasConstraintName("FK_tbActividadPorOptante_Accs_tbUsuarios_acpe_UsuarioModificacion");

                entity.HasOne(d => d.Acti)
                    .WithMany(p => p.TbActividadesPorOptante)
                    .HasForeignKey(d => d.ActiId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbActividadPorOptante_tbActividades_acti_Id");

                entity.HasOne(d => d.Opta)
                    .WithMany(p => p.TbActividadesPorOptante)
                    .HasForeignKey(d => d.OptaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbActividadPorOptante_tbOptantes_opta_Id");
            });

            modelBuilder.Entity<TbBancos>(entity =>
            {
                entity.HasKey(e => e.BancId);

                entity.ToTable("tbBancos", "Gral");

                entity.HasIndex(e => e.BancDescripcion, "UQ_banc_Descripcion")
                    .IsUnique();

                entity.Property(e => e.BancId).HasColumnName("banc_Id");

                entity.Property(e => e.BancDescripcion)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("banc_Descripcion");

                entity.Property(e => e.BancEstado).HasColumnName("banc_Estado");

                entity.Property(e => e.BancFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("banc_FechaCreacion");

                entity.Property(e => e.BancFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("banc_FechaModificacion");

                entity.Property(e => e.BancUsuarioCreacion).HasColumnName("banc_UsuarioCreacion");

                entity.Property(e => e.BancUsuarioModificacion).HasColumnName("banc_UsuarioModificacion");

                entity.HasOne(d => d.BancUsuarioCreacionNavigation)
                    .WithMany(p => p.TbBancosBancUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.BancUsuarioCreacion)
                    .HasConstraintName("FK_tbBancos_Accs_tbUsuarios_banc_UsuarioCreacion");

                entity.HasOne(d => d.BancUsuarioModificacionNavigation)
                    .WithMany(p => p.TbBancosBancUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.BancUsuarioModificacion)
                    .HasConstraintName("FK_tbBancos_Accs_tbUsuarios_banc_UsuarioModificacion");
            });

            modelBuilder.Entity<TbBeneficios>(entity =>
            {
                entity.HasKey(e => e.BeneId)
                    .HasName("PK__tbBenefi__3DC63B52DD27B6DE");

                entity.ToTable("tbBeneficios", "Gest");

                entity.Property(e => e.BeneId).HasColumnName("bene_Id");

                entity.Property(e => e.BeneCantidad)
                    .HasColumnType("money")
                    .HasColumnName("bene_Cantidad");

                entity.Property(e => e.BeneDescripcionBeneficio)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bene_DescripcionBeneficio");

                entity.Property(e => e.BeneEstado)
                    .HasColumnName("bene_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BeneFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("bene_FechaCreacion");

                entity.Property(e => e.BeneFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("bene_FechaModificacion");

                entity.Property(e => e.BeneNombreBeneficio)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("bene_NombreBeneficio");

                entity.Property(e => e.BeneUsuarioCreacion).HasColumnName("bene_UsuarioCreacion");

                entity.Property(e => e.BeneUsuarioModificacion).HasColumnName("bene_UsuarioModificacion");

                entity.HasOne(d => d.BeneUsuarioCreacionNavigation)
                    .WithMany(p => p.TbBeneficiosBeneUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.BeneUsuarioCreacion)
                    .HasConstraintName("FK_tbBeneficios_Accs_tbUsuarios_bene_UsuarioCreacion");

                entity.HasOne(d => d.BeneUsuarioModificacionNavigation)
                    .WithMany(p => p.TbBeneficiosBeneUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.BeneUsuarioModificacion)
                    .HasConstraintName("FK_tbBeneficios_Accs_tbUsuarios_bene_UsuarioModificacion");
            });

            modelBuilder.Entity<TbBeneficiosPorOptante>(entity =>
            {
                entity.HasKey(e => e.BepeId)
                    .HasName("PK__tbBenefi__F99C73D6EA60BDE8");

                entity.ToTable("tbBeneficiosPorOptante", "Gest");

                entity.Property(e => e.BepeId).HasColumnName("bepe_Id");

                entity.Property(e => e.BeneId).HasColumnName("bene_Id");

                entity.Property(e => e.OptaId).HasColumnName("opta_Id");

                entity.HasOne(d => d.Bene)
                    .WithMany(p => p.TbBeneficiosPorOptante)
                    .HasForeignKey(d => d.BeneId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbBeneficioPorOptante_tbBeneficios_bene_Id");

                entity.HasOne(d => d.Opta)
                    .WithMany(p => p.TbBeneficiosPorOptante)
                    .HasForeignKey(d => d.OptaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbBeneficioPorOptante_tbOptantes_opta_Id");
            });

            modelBuilder.Entity<TbCarreraPorFacultadPorRegional>(entity =>
            {
                entity.HasKey(e => e.CafrId)
                    .HasName("PK__tbCarrer__8AA093B45B128080");

                entity.ToTable("tbCarreraPorFacultadPorRegional", "Gral");

                entity.Property(e => e.CafrId).HasColumnName("cafr_Id");

                entity.Property(e => e.CarrId).HasColumnName("carr_Id");

                entity.Property(e => e.FareId).HasColumnName("fare_Id");

                entity.HasOne(d => d.Carr)
                    .WithMany(p => p.TbCarreraPorFacultadPorRegional)
                    .HasForeignKey(d => d.CarrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbCarreraPorFaculatadPorReginal_tbCarreras_carr_Id");

                entity.HasOne(d => d.Fare)
                    .WithMany(p => p.TbCarreraPorFacultadPorRegional)
                    .HasForeignKey(d => d.FareId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbCarreraPorFaculatadPorReginal_tbFacultadPorRegional_fare_Id");
            });

            modelBuilder.Entity<TbCarreras>(entity =>
            {
                entity.HasKey(e => e.CarrId)
                    .HasName("PK__tbCarrer__7ED01DB1F4AEFC5F");

                entity.ToTable("tbCarreras", "Gral");

                entity.HasIndex(e => e.CarrDescripcionCarrera, "UQ__tbCarrer__C7EE739BE5A07328")
                    .IsUnique();

                entity.Property(e => e.CarrId).HasColumnName("carr_Id");

                entity.Property(e => e.CarrDescripcionCarrera)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("carr_DescripcionCarrera");

                entity.Property(e => e.CarrEstado)
                    .HasColumnName("carr_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CarrFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("carr_FechaCreacion");

                entity.Property(e => e.CarrFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("carr_FechaModificacion");

                entity.Property(e => e.CarrUsuarioCreacion).HasColumnName("carr_UsuarioCreacion");

                entity.Property(e => e.CarrUsuarioModificacion).HasColumnName("carr_UsuarioModificacion");

                entity.HasOne(d => d.CarrUsuarioCreacionNavigation)
                    .WithMany(p => p.TbCarrerasCarrUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.CarrUsuarioCreacion)
                    .HasConstraintName("FK_tbCarreras_Accs_tbUsuarios_carr_UsuarioCreacion");

                entity.HasOne(d => d.CarrUsuarioModificacionNavigation)
                    .WithMany(p => p.TbCarrerasCarrUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.CarrUsuarioModificacion)
                    .HasConstraintName("FK_tbCarreras_Accs_tbUsuarios_carr_UsuarioModificacion");
            });

            modelBuilder.Entity<TbComponentes>(entity =>
            {
                entity.HasKey(e => e.CompId)
                    .HasName("PK__tbCompon__531157F598460F30");

                entity.ToTable("tbComponentes", "Gest");

                entity.HasIndex(e => e.CompNombreComponente, "UQ__tbCompon__918F2BC481C11832")
                    .IsUnique();

                entity.Property(e => e.CompId).HasColumnName("comp_Id");

                entity.Property(e => e.CompComponenteFinalizado).HasColumnName("comp_ComponenteFinalizado");

                entity.Property(e => e.CompDescripcionComponente)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("comp_DescripcionComponente");

                entity.Property(e => e.CompEstado)
                    .HasColumnName("comp_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CompFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("comp_FechaCreacion");

                entity.Property(e => e.CompFechaFin)
                    .HasColumnType("date")
                    .HasColumnName("comp_FechaFin");

                entity.Property(e => e.CompFechaInicio)
                    .HasColumnType("date")
                    .HasColumnName("comp_FechaInicio");

                entity.Property(e => e.CompFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("comp_FechaModificacion");

                entity.Property(e => e.CompHorasAsignadas).HasColumnName("comp_HorasAsignadas");

                entity.Property(e => e.CompHorasCumplidas).HasColumnName("comp_HorasCumplidas");

                entity.Property(e => e.CompNombreComponente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comp_NombreComponente");

                entity.Property(e => e.CompObservacion)
                    .IsUnicode(false)
                    .HasColumnName("comp_Observacion");

                entity.Property(e => e.CompUsuarioCreacion).HasColumnName("comp_UsuarioCreacion");

                entity.Property(e => e.CompUsuarioModificacion).HasColumnName("comp_UsuarioModificacion");

                entity.Property(e => e.PrytId).HasColumnName("pryt_Id");

                entity.HasOne(d => d.CompUsuarioCreacionNavigation)
                    .WithMany(p => p.TbComponentesCompUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.CompUsuarioCreacion)
                    .HasConstraintName("FK_tbComponentes_Accs_tbUsuarios_comp_UsuarioCreacion");

                entity.HasOne(d => d.CompUsuarioModificacionNavigation)
                    .WithMany(p => p.TbComponentesCompUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.CompUsuarioModificacion)
                    .HasConstraintName("FK_tbComponentes_Accs_tbUsuarios_comp_UsuarioModificacion");

                entity.HasOne(d => d.Pryt)
                    .WithMany(p => p.TbComponentes)
                    .HasForeignKey(d => d.PrytId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TbComponentesPorRegionalPorEmpleado>(entity =>
            {
                entity.HasKey(e => e.CoreId)
                    .HasName("PK__tbCompon__5268D43D1D3FC0B6");

                entity.ToTable("tbComponentesPorRegionalPorEmpleado", "Gest");

                entity.Property(e => e.CoreId).HasColumnName("core_Id");

                entity.Property(e => e.CompId).HasColumnName("comp_Id");

                entity.Property(e => e.EmplId).HasColumnName("empl_Id");

                entity.Property(e => e.RecoId).HasColumnName("reco_Id");

                entity.HasOne(d => d.Comp)
                    .WithMany(p => p.TbComponentesPorRegionalPorEmpleado)
                    .HasForeignKey(d => d.CompId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbComponentesPorRegional_Gest_tbComponentes_comp_Id");

                entity.HasOne(d => d.Empl)
                    .WithMany(p => p.TbComponentesPorRegionalPorEmpleado)
                    .HasForeignKey(d => d.EmplId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbComponentesPorRegional_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.Reco)
                    .WithMany(p => p.TbComponentesPorRegionalPorEmpleado)
                    .HasForeignKey(d => d.RecoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbComponentesPorRegional_Gral_tbRegionalCorporativa_reco_Id");
            });

            modelBuilder.Entity<TbCuestionarios>(entity =>
            {
                entity.HasKey(e => e.CuesId)
                    .HasName("PK__tbCuesti__03016624BB9C0C1C");

                entity.ToTable("tbCuestionarios", "Gest");

                entity.Property(e => e.CuesId).HasColumnName("cues_Id");

                entity.Property(e => e.CuesCuestionarioProgramado).HasColumnName("cues_CuestionarioProgramado");

                entity.Property(e => e.CuesDescripcionCuestionario)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cues_DescripcionCuestionario");

                entity.Property(e => e.CuesEsCalificado).HasColumnName("cues_EsCalificado");

                entity.Property(e => e.CuesEstado)
                    .HasColumnName("cues_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CuesFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("cues_FechaCreacion");

                entity.Property(e => e.CuesFechaHoraProgramado)
                    .HasColumnType("datetime")
                    .HasColumnName("cues_FechaHoraProgramado");

                entity.Property(e => e.CuesFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("cues_FechaModificacion");

                entity.Property(e => e.CuesNombreCuestionario)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cues_NombreCuestionario");

                entity.Property(e => e.CuesPuntuacion)
                    .HasColumnType("decimal(2, 1)")
                    .HasColumnName("cues_Puntuacion");

                entity.Property(e => e.CuesUsuarioCreacion).HasColumnName("cues_UsuarioCreacion");

                entity.Property(e => e.CuesUsuarioModificacion).HasColumnName("cues_UsuarioModificacion");

                entity.HasOne(d => d.CuesUsuarioCreacionNavigation)
                    .WithMany(p => p.TbCuestionariosCuesUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.CuesUsuarioCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbCuestionarios_Accs_tbUsuarios_cues_UsuarioCreacion");

                entity.HasOne(d => d.CuesUsuarioModificacionNavigation)
                    .WithMany(p => p.TbCuestionariosCuesUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.CuesUsuarioModificacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbCuestionarios_Accs_tbUsuarios_cues_UsuarioModificacion");
            });

            modelBuilder.Entity<TbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.DepaId)
                    .HasName("PK__tbDepart__E3F3B11E0E3B1F82");

                entity.ToTable("tbDepartamentos", "Gral");

                entity.HasIndex(e => e.DepaDescripcionDepartamento, "UQ__tbDepart__EED74EF8B26E942E")
                    .IsUnique();

                entity.HasIndex(e => e.DepaDescripcionDepartamento, "UQ_depa_DescripcionDepartamento")
                    .IsUnique();

                entity.Property(e => e.DepaId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("depa_Id");

                entity.Property(e => e.DepaDescripcionDepartamento)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("depa_DescripcionDepartamento");

                entity.Property(e => e.DepaEstado)
                    .HasColumnName("depa_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DepaFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("depa_FechaCreacion");

                entity.Property(e => e.DepaFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("depa_FechaModificacion");

                entity.Property(e => e.DepaUsuarioCreacion).HasColumnName("depa_UsuarioCreacion");

                entity.Property(e => e.DepaUsuarioModificacion).HasColumnName("depa_UsuarioModificacion");

                entity.HasOne(d => d.DepaUsuarioCreacionNavigation)
                    .WithMany(p => p.TbDepartamentosDepaUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.DepaUsuarioCreacion)
                    .HasConstraintName("FK_tbDepartamentos_Accs_tbUsuarios_depa_UsuarioCreacion");

                entity.HasOne(d => d.DepaUsuarioModificacionNavigation)
                    .WithMany(p => p.TbDepartamentosDepaUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.DepaUsuarioModificacion)
                    .HasConstraintName("FK_tbDepartamentos_Accs_tbUsuarios_depa_UsuarioModificacion");
            });

            modelBuilder.Entity<TbDiscusiones>(entity =>
            {
                entity.HasKey(e => e.DiscId)
                    .HasName("PK__tbDiscus__0AC3326B27F0BF58");

                entity.ToTable("tbDiscusiones", "Comm");

                entity.Property(e => e.DiscId).HasColumnName("disc_Id");

                entity.Property(e => e.DiscAsunto)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("disc_Asunto");

                entity.Property(e => e.DiscEsOptante).HasColumnName("disc_EsOptante");

                entity.Property(e => e.DiscEstado)
                    .HasColumnName("disc_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DiscFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("disc_FechaCreacion");

                entity.Property(e => e.DiscFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("disc_FechaModificacion");

                entity.Property(e => e.DiscHoras)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("disc_Horas");

                entity.Property(e => e.DiscMensaje)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("disc_Mensaje");

                entity.Property(e => e.DiscUsuarioCreacion).HasColumnName("disc_UsuarioCreacion");

                entity.Property(e => e.DiscUsuarioModificacion).HasColumnName("disc_UsuarioModificacion");

                entity.Property(e => e.FafeId).HasColumnName("fafe_Id");

                entity.Property(e => e.OpemId).HasColumnName("opem_Id");

                entity.HasOne(d => d.DiscUsuarioCreacionNavigation)
                    .WithMany(p => p.TbDiscusionesDiscUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.DiscUsuarioCreacion)
                    .HasConstraintName("FK_tbDiscusiones_Accs_tbUsuarios_disc_UsuarioCreacion");

                entity.HasOne(d => d.DiscUsuarioModificacionNavigation)
                    .WithMany(p => p.TbDiscusionesDiscUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.DiscUsuarioModificacion)
                    .HasConstraintName("FK_tbDiscusiones_Accs_tbUsuarios_disc_UsuarioModificacion");
            });

            modelBuilder.Entity<TbDocumentos>(entity =>
            {
                entity.HasKey(e => e.DocuId)
                    .HasName("PK__tbDocume__7C2F03F8BA7574B0");

                entity.ToTable("tbDocumentos", "Gest");

                entity.HasIndex(e => e.DocuDescripcion, "UQ__tbDocume__9055BBD41CAF4DF0")
                    .IsUnique();

                entity.Property(e => e.DocuId).HasColumnName("docu_Id");

                entity.Property(e => e.DocuDescripcion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("docu_Descripcion");

                entity.Property(e => e.DocuEstado)
                    .HasColumnName("docu_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DocuFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("docu_FechaCreacion");

                entity.Property(e => e.DocuFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("docu_FechaModificacion");

                entity.Property(e => e.DocuUsuarioCreacion).HasColumnName("docu_UsuarioCreacion");

                entity.Property(e => e.DocuUsuarioModificacion).HasColumnName("docu_UsuarioModificacion");

                entity.Property(e => e.TidoId).HasColumnName("tido_Id");

                entity.HasOne(d => d.DocuUsuarioCreacionNavigation)
                    .WithMany(p => p.TbDocumentosDocuUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.DocuUsuarioCreacion)
                    .HasConstraintName("FK_tbDocumentos_Accs_tbUsuarios_docu_UsuarioCreacion");

                entity.HasOne(d => d.DocuUsuarioModificacionNavigation)
                    .WithMany(p => p.TbDocumentosDocuUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.DocuUsuarioModificacion)
                    .HasConstraintName("FK_tbDocumentos_Accs_tbUsuarios_docu_UsuarioModificacion");

                entity.HasOne(d => d.Tido)
                    .WithMany(p => p.TbDocumentos)
                    .HasForeignKey(d => d.TidoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbDocumentos_Gral_tbTipoDocumento_tido_Id");
            });

            modelBuilder.Entity<TbDocumentosImagenesPorDiscusion>(entity =>
            {
                entity.HasKey(e => e.DidiId)
                    .HasName("PK__tbDocume__589485ABEED73160");

                entity.ToTable("tbDocumentosImagenesPorDiscusion", "Comm");

                entity.Property(e => e.DidiId).HasColumnName("didi_Id");

                entity.Property(e => e.DidiDocumentoOimagen)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("didi_DocumentoOImagen");

                entity.Property(e => e.DiscId).HasColumnName("disc_Id");

                entity.HasOne(d => d.Disc)
                    .WithMany(p => p.TbDocumentosImagenesPorDiscusion)
                    .HasForeignKey(d => d.DiscId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TbDocumentosOptantes>(entity =>
            {
                entity.HasKey(e => e.DoopId)
                    .HasName("PK__tbDocume__093F6F16A10E2932");

                entity.ToTable("tbDocumentosOptantes", "Gest");

                entity.HasIndex(e => e.DoopDescripcion, "UQ__tbDocume__E25017672BD1A582")
                    .IsUnique();

                entity.Property(e => e.DoopId).HasColumnName("doop_Id");

                entity.Property(e => e.DoopDescripcion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("doop_Descripcion");

                entity.Property(e => e.DoopEstado)
                    .HasColumnName("doop_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DoopFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("doop_FechaCreacion");

                entity.Property(e => e.DoopFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("doop_FechaModificacion");

                entity.Property(e => e.DoopUsuarioCreacion).HasColumnName("doop_UsuarioCreacion");

                entity.Property(e => e.DoopUsuarioModificacion).HasColumnName("doop_UsuarioModificacion");

                entity.Property(e => e.OptaId).HasColumnName("opta_Id");

                entity.Property(e => e.TidoId).HasColumnName("tido_Id");

                entity.HasOne(d => d.DoopUsuarioCreacionNavigation)
                    .WithMany(p => p.TbDocumentosOptantesDoopUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.DoopUsuarioCreacion)
                    .HasConstraintName("FK_tbDocumentosOptantes_Accs_tbUsuarios_doop_UsuarioCreacion");

                entity.HasOne(d => d.DoopUsuarioModificacionNavigation)
                    .WithMany(p => p.TbDocumentosOptantesDoopUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.DoopUsuarioModificacion)
                    .HasConstraintName("FK_tbDocumentosOptantes_Accs_tbUsuarios_doop_UsuarioModificacion");

                entity.HasOne(d => d.Opta)
                    .WithMany(p => p.TbDocumentosOptantes)
                    .HasForeignKey(d => d.OptaId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Tido)
                    .WithMany(p => p.TbDocumentosOptantes)
                    .HasForeignKey(d => d.TidoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbDocumentosOptantes_Gral_tbTipoDocumento_tido_Id");
            });

            modelBuilder.Entity<TbEmpleados>(entity =>
            {
                entity.HasKey(e => e.EmplId)
                    .HasName("PK__tbEmplea__4772AE31151CA207");

                entity.ToTable("tbEmpleados", "Gral");

                entity.HasIndex(e => e.EmplDni, "UQ_empl_DNI")
                    .IsUnique();

                entity.Property(e => e.EmplId).HasColumnName("empl_Id");

                entity.Property(e => e.CiviId).HasColumnName("civi_Id");

                entity.Property(e => e.EmplApellidos)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("empl_Apellidos");

                entity.Property(e => e.EmplCorreo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("empl_Correo");

                entity.Property(e => e.EmplDni)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("empl_DNI");

                entity.Property(e => e.EmplEsContador).HasColumnName("empl_EsContador");

                entity.Property(e => e.EmplEstado).HasColumnName("empl_Estado");

                entity.Property(e => e.EmplFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("empl_FechaCreacion");

                entity.Property(e => e.EmplFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("empl_FechaModificacion");

                entity.Property(e => e.EmplImagen)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("empl_Imagen");

                entity.Property(e => e.EmplNombres)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("empl_Nombres");

                entity.Property(e => e.EmplSexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("empl_Sexo")
                    .IsFixedLength(true);

                entity.Property(e => e.EmplTelefono)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("empl_Telefono");

                entity.Property(e => e.EmplUsuarioCreacion).HasColumnName("empl_UsuarioCreacion");

                entity.Property(e => e.EmplUsuarioModificacion).HasColumnName("empl_UsuarioModificacion");

                entity.Property(e => e.MuniId)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("muni_Id");

                entity.Property(e => e.PustId).HasColumnName("pust_Id");

                entity.Property(e => e.TisaId).HasColumnName("tisa_Id");

                entity.HasOne(d => d.Civi)
                    .WithMany(p => p.TbEmpleados)
                    .HasForeignKey(d => d.CiviId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.EmplUsuarioCreacionNavigation)
                    .WithMany(p => p.TbEmpleadosEmplUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.EmplUsuarioCreacion)
                    .HasConstraintName("FK_tbEmpleados_Accs_tbUsuarios_empl_UsuarioCreacion");

                entity.HasOne(d => d.EmplUsuarioModificacionNavigation)
                    .WithMany(p => p.TbEmpleadosEmplUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.EmplUsuarioModificacion)
                    .HasConstraintName("FK_tbEmpleados_Accs_tbUsuarios_empl_UsuarioModificacion");

                entity.HasOne(d => d.Muni)
                    .WithMany(p => p.TbEmpleados)
                    .HasForeignKey(d => d.MuniId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Pust)
                    .WithMany(p => p.TbEmpleados)
                    .HasForeignKey(d => d.PustId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Tisa)
                    .WithMany(p => p.TbEmpleados)
                    .HasForeignKey(d => d.TisaId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TbEmpleadosPorActividad>(entity =>
            {
                entity.HasKey(e => e.EmacId)
                    .HasName("PK__tbEmplea__BCCA90A4AC372A95");

                entity.ToTable("tbEmpleadosPorActividad", "Gest");

                entity.Property(e => e.EmacId).HasColumnName("emac_Id");

                entity.Property(e => e.ActiId).HasColumnName("acti_Id");

                entity.Property(e => e.EmplId).HasColumnName("empl_Id");

                entity.HasOne(d => d.Acti)
                    .WithMany(p => p.TbEmpleadosPorActividad)
                    .HasForeignKey(d => d.ActiId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Empl)
                    .WithMany(p => p.TbEmpleadosPorActividad)
                    .HasForeignKey(d => d.EmplId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbEmpleadosPorActividad_Gral_tbEmpleados_empl_Id");
            });

            modelBuilder.Entity<TbEmpresas>(entity =>
            {
                entity.HasKey(e => e.EmprId)
                    .HasName("PK__tbEmpres__7D468F0B69F083C0");

                entity.ToTable("tbEmpresas", "Gest");

                entity.HasIndex(e => e.EmprSiglas, "UQ__tbEmpres__182F21D73DCE6C28")
                    .IsUnique();

                entity.HasIndex(e => e.EmprDescripcionEmpresa, "UQ__tbEmpres__DF23A0AC236CB952")
                    .IsUnique();

                entity.Property(e => e.EmprId).HasColumnName("empr_Id");

                entity.Property(e => e.EmprDescripcionEmpresa)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("empr_DescripcionEmpresa");

                entity.Property(e => e.EmprDireccionExacta)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("empr_DireccionExacta");

                entity.Property(e => e.EmprEstado)
                    .HasColumnName("empr_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EmprFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("empr_FechaCreacion");

                entity.Property(e => e.EmprFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("empr_FechaModificacion");

                entity.Property(e => e.EmprLogo)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("empr_Logo");

                entity.Property(e => e.EmprSiglas)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("empr_Siglas");

                entity.Property(e => e.EmprUsuarioCreacion).HasColumnName("empr_UsuarioCreacion");

                entity.Property(e => e.EmprUsuarioModificacion).HasColumnName("empr_UsuarioModificacion");

                entity.Property(e => e.MuniId)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("muni_Id");

                entity.HasOne(d => d.EmprUsuarioCreacionNavigation)
                    .WithMany(p => p.TbEmpresasEmprUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.EmprUsuarioCreacion)
                    .HasConstraintName("FK_tbEmpresas_Accs_tbUsuarios_empr_UsuarioCreacion");

                entity.HasOne(d => d.EmprUsuarioModificacionNavigation)
                    .WithMany(p => p.TbEmpresasEmprUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.EmprUsuarioModificacion)
                    .HasConstraintName("FK_tbEmpresas_Accs_tbUsuarios_empr_UsuarioModificacion");

                entity.HasOne(d => d.Muni)
                    .WithMany(p => p.TbEmpresas)
                    .HasForeignKey(d => d.MuniId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbEmpresas_Gral_tbMunicipios_muni_Id");
            });

            modelBuilder.Entity<TbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.CiviId)
                    .HasName("PK__tbEstado__748BC9DC0BA51B64");

                entity.ToTable("tbEstadosCiviles", "Gral");

                entity.HasIndex(e => e.CiviDescripcionEstadoCivil, "UQ__tbEstado__2DAB6DA8E67DF73B")
                    .IsUnique();

                entity.Property(e => e.CiviId).HasColumnName("civi_Id");

                entity.Property(e => e.CiviDescripcionEstadoCivil)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("civi_DescripcionEstadoCivil");

                entity.Property(e => e.CiviEstado)
                    .HasColumnName("civi_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CiviFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("civi_FechaCreacion");

                entity.Property(e => e.CiviFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("civi_FechaModificacion");

                entity.Property(e => e.CiviUsuarioCreacion).HasColumnName("civi_UsuarioCreacion");

                entity.Property(e => e.CiviUsuarioModificacion).HasColumnName("civi_UsuarioModificacion");

                entity.HasOne(d => d.CiviUsuarioCreacionNavigation)
                    .WithMany(p => p.TbEstadosCivilesCiviUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.CiviUsuarioCreacion)
                    .HasConstraintName("FK_tbEstadosCiviles_Accs_tbUsuarios_civi_UsuarioCreacion");

                entity.HasOne(d => d.CiviUsuarioModificacionNavigation)
                    .WithMany(p => p.TbEstadosCivilesCiviUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.CiviUsuarioModificacion)
                    .HasConstraintName("FK_tbEstadosCiviles_Accs_tbUsuarios_civi_UsuarioModificacion");
            });

            modelBuilder.Entity<TbFacultadPorRegional>(entity =>
            {
                entity.HasKey(e => e.FareId)
                    .HasName("PK__tbFacult__8E0B3BB5E1C53A5B");

                entity.ToTable("tbFacultadPorRegional", "Gral");

                entity.Property(e => e.FareId).HasColumnName("fare_Id");

                entity.Property(e => e.FacuId).HasColumnName("facu_Id");

                entity.Property(e => e.RegiId).HasColumnName("regi_Id");

                entity.HasOne(d => d.Facu)
                    .WithMany(p => p.TbFacultadPorRegional)
                    .HasForeignKey(d => d.FacuId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Regi)
                    .WithMany(p => p.TbFacultadPorRegional)
                    .HasForeignKey(d => d.RegiId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TbFacultades>(entity =>
            {
                entity.HasKey(e => e.FacuId)
                    .HasName("PK__tbFacult__28EB048012269032");

                entity.ToTable("tbFacultades", "Gral");

                entity.HasIndex(e => e.FacuDesripcionFacultad, "UQ_tbFacultades_facu_DesripcionFacultad")
                    .IsUnique();

                entity.Property(e => e.FacuId).HasColumnName("facu_Id");

                entity.Property(e => e.FacuDesripcionFacultad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("facu_DesripcionFacultad");

                entity.Property(e => e.FacuEstado)
                    .HasColumnName("facu_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FacuFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("facu_FechaCreacion");

                entity.Property(e => e.FacuFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("facu_FechaModificacion");

                entity.Property(e => e.FacuUsuarioCreacion).HasColumnName("facu_UsuarioCreacion");

                entity.Property(e => e.FacuUsuarioModificacion).HasColumnName("facu_UsuarioModificacion");

                entity.HasOne(d => d.FacuUsuarioCreacionNavigation)
                    .WithMany(p => p.TbFacultadesFacuUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.FacuUsuarioCreacion)
                    .HasConstraintName("FK_tbFacultades_Accs_tbUsuarios_facu_UsuarioCreacion");

                entity.HasOne(d => d.FacuUsuarioModificacionNavigation)
                    .WithMany(p => p.TbFacultadesFacuUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.FacuUsuarioModificacion)
                    .HasConstraintName("FK_tbFacultades_Accs_tbUsuarios_facu_UsuarioModificacion");
            });

            modelBuilder.Entity<TbForos>(entity =>
            {
                entity.HasKey(e => e.ForoId)
                    .HasName("PK__tbForos__6C73713F0E4F8A77");

                entity.ToTable("tbForos", "Comm");

                entity.Property(e => e.ForoId).HasColumnName("foro_Id");

                entity.Property(e => e.ForoEsNacional).HasColumnName("foro_EsNacional");

                entity.Property(e => e.ForoEsParaEmpleados).HasColumnName("foro_EsParaEmpleados");

                entity.Property(e => e.ForoEstado)
                    .HasColumnName("foro_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ForoFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("foro_FechaCreacion");

                entity.Property(e => e.ForoFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("foro_FechaModificacion");

                entity.Property(e => e.ForoTitulo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("foro_Titulo");

                entity.Property(e => e.ForoUsuarioCreacion).HasColumnName("foro_UsuarioCreacion");

                entity.Property(e => e.ForoUsuarioModificacion).HasColumnName("foro_UsuarioModificacion");

                entity.HasOne(d => d.ForoUsuarioCreacionNavigation)
                    .WithMany(p => p.TbForosForoUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.ForoUsuarioCreacion)
                    .HasConstraintName("FK_tbForos_Accs_tbUsuarios_foro_UsuarioCreacion");

                entity.HasOne(d => d.ForoUsuarioModificacionNavigation)
                    .WithMany(p => p.TbForosForoUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.ForoUsuarioModificacion)
                    .HasConstraintName("FK_tbForos_Accs_tbUsuarios_foro_UsuarioModificacion");
            });

            modelBuilder.Entity<TbForosPorActividad>(entity =>
            {
                entity.HasKey(e => e.FoacId)
                    .HasName("PK__tbForosP__02075A0B75F42DF8");

                entity.ToTable("tbForosPorActividad", "Comm");

                entity.Property(e => e.FoacId).HasColumnName("foac_Id");

                entity.Property(e => e.ActiId).HasColumnName("acti_Id");

                entity.Property(e => e.CompId).HasColumnName("comp_Id");

                entity.Property(e => e.FoacDescripcion)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("foac_Descripcion");

                entity.Property(e => e.FoacEstado)
                    .HasColumnName("foac_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FoacFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("foac_FechaCreacion");

                entity.Property(e => e.FoacFechaHoraProgramado)
                    .HasColumnType("datetime")
                    .HasColumnName("foac_FechaHoraProgramado");

                entity.Property(e => e.FoacFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("foac_FechaModificacion");

                entity.Property(e => e.FoacForoProgramado).HasColumnName("foac_ForoProgramado");

                entity.Property(e => e.FoacHoras).HasColumnName("foac_Horas");

                entity.Property(e => e.FoacOtorgaHoras).HasColumnName("foac_OtorgaHoras");

                entity.Property(e => e.FoacUsuarioCreacion).HasColumnName("foac_UsuarioCreacion");

                entity.Property(e => e.FoacUsuarioModificacion).HasColumnName("foac_UsuarioModificacion");

                entity.Property(e => e.ForoId).HasColumnName("foro_Id");

                entity.HasOne(d => d.Acti)
                    .WithMany(p => p.TbForosPorActividad)
                    .HasForeignKey(d => d.ActiId);

                entity.HasOne(d => d.Comp)
                    .WithMany(p => p.TbForosPorActividad)
                    .HasForeignKey(d => d.CompId)
                    .HasConstraintName("FK_tbForosPorActividad_Gest_tbComponentes_comp_Id");

                entity.HasOne(d => d.FoacUsuarioCreacionNavigation)
                    .WithMany(p => p.TbForosPorActividadFoacUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.FoacUsuarioCreacion)
                    .HasConstraintName("FK_tbForosPorActividad_Accs_tbUsuarios_foac_UsuarioCreacion");

                entity.HasOne(d => d.FoacUsuarioModificacionNavigation)
                    .WithMany(p => p.TbForosPorActividadFoacUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.FoacUsuarioModificacion)
                    .HasConstraintName("FK_tbForosPorActividad_Accs_tbUsuarios_foac_UsuarioModificacion");

                entity.HasOne(d => d.Foro)
                    .WithMany(p => p.TbForosPorActividad)
                    .HasForeignKey(d => d.ForoId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TbForosPorEmpleados>(entity =>
            {
                entity.HasKey(e => e.FoemId);

                entity.ToTable("tbForosPorEmpleados", "Comm");

                entity.Property(e => e.FoemId).HasColumnName("foem_Id");

                entity.Property(e => e.FoemDescripcion)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("foem_Descripcion");

                entity.Property(e => e.FoemEstado).HasColumnName("foem_Estado");

                entity.Property(e => e.FoemFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("foem_FechaCreacion");

                entity.Property(e => e.FoemFechaHoraProgramado)
                    .HasColumnType("datetime")
                    .HasColumnName("foem_FechaHoraProgramado");

                entity.Property(e => e.FoemFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("foem_FechaModificacion");

                entity.Property(e => e.FoemForoProgramado).HasColumnName("foem_ForoProgramado");

                entity.Property(e => e.FoemUsuarioCreacion).HasColumnName("foem_UsuarioCreacion");

                entity.Property(e => e.FoemUsuarioModificacion).HasColumnName("foem_UsuarioModificacion");

                entity.Property(e => e.ForoId).HasColumnName("foro_Id");

                entity.HasOne(d => d.FoemUsuarioCreacionNavigation)
                    .WithMany(p => p.TbForosPorEmpleadosFoemUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.FoemUsuarioCreacion)
                    .HasConstraintName("FK_tbForosPorEmpleados_Accs_tbUsuarios_foem_UsuarioCreacion");

                entity.HasOne(d => d.FoemUsuarioModificacionNavigation)
                    .WithMany(p => p.TbForosPorEmpleadosFoemUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.FoemUsuarioModificacion)
                    .HasConstraintName("FK_tbForosPorEmpleados_Accs_tbUsuarios_foem_UsuarioModificacion");

                entity.HasOne(d => d.Foro)
                    .WithMany(p => p.TbForosPorEmpleados)
                    .HasForeignKey(d => d.ForoId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TbHojaTiempo>(entity =>
            {
                entity.HasKey(e => e.HotiId)
                    .HasName("PK__tbHojaTi__3277BDB03DCAE14C");

                entity.ToTable("tbHojaTiempo", "Gest");

                entity.Property(e => e.HotiId).HasColumnName("hoti_Id");

                entity.Property(e => e.CompId).HasColumnName("comp_Id");

                entity.Property(e => e.HotiEstado).HasColumnName("hoti_Estado");

                entity.Property(e => e.HotiFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("hoti_FechaCreacion");

                entity.Property(e => e.HotiFechaHoraEntregaLimite)
                    .HasColumnType("datetime")
                    .HasColumnName("hoti_FechaHoraEntregaLimite");

                entity.Property(e => e.HotiFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("hoti_FechaModificacion");

                entity.Property(e => e.HotiHorasMinimas).HasColumnName("hoti_HorasMinimas");

                entity.Property(e => e.HotiPeriodoFinal)
                    .HasColumnType("date")
                    .HasColumnName("hoti_PeriodoFinal");

                entity.Property(e => e.HotiPeriodoInicio)
                    .HasColumnType("date")
                    .HasColumnName("hoti_PeriodoInicio");

                entity.Property(e => e.HotiUsuarioCreacion).HasColumnName("hoti_UsuarioCreacion");

                entity.Property(e => e.HotiUsuarioModificacion).HasColumnName("hoti_UsuarioModificacion");

                entity.HasOne(d => d.Comp)
                    .WithMany(p => p.TbHojaTiempo)
                    .HasForeignKey(d => d.CompId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbHojaTiempo_Gest_tbComponentes_comp_Id");

                entity.HasOne(d => d.HotiUsuarioCreacionNavigation)
                    .WithMany(p => p.TbHojaTiempoHotiUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.HotiUsuarioCreacion)
                    .HasConstraintName("FK_tbHojaTiempo_Accs_tbUsuarios_hoti_UsuarioCreacion");

                entity.HasOne(d => d.HotiUsuarioModificacionNavigation)
                    .WithMany(p => p.TbHojaTiempoHotiUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.HotiUsuarioModificacion)
                    .HasConstraintName("FK_tbHojaTiempo_Accs_tbUsuarios_hoti_UsuarioModificacion");
            });

            modelBuilder.Entity<TbHojaTiempoPorOptante>(entity =>
            {
                entity.HasKey(e => e.HotoId)
                    .HasName("PK__tbHojaTi__62F07577EA6814A5");

                entity.ToTable("tbHojaTiempoPorOptante", "Gest");

                entity.Property(e => e.HotoId).HasColumnName("hoto_Id");

                entity.Property(e => e.HotiAprobada).HasColumnName("hoti_Aprobada");

                entity.Property(e => e.HotiId).HasColumnName("hoti_Id");

                entity.Property(e => e.HotoComentario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("hoto_Comentario");

                entity.Property(e => e.HotoEstado).HasColumnName("hoto_Estado");

                entity.Property(e => e.HotoFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("hoto_FechaCreacion");

                entity.Property(e => e.HotoFechaHoraEntrega)
                    .HasColumnType("datetime")
                    .HasColumnName("hoto_FechaHoraEntrega");

                entity.Property(e => e.HotoFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("hoto_FechaModificacion");

                entity.Property(e => e.HotoHorasTotalesRealizadas)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("hoto_HorasTotalesRealizadas");

                entity.Property(e => e.HotoUsuarioCreacion).HasColumnName("hoto_UsuarioCreacion");

                entity.Property(e => e.HotoUsuarioModificacion).HasColumnName("hoto_UsuarioModificacion");

                entity.Property(e => e.OptaId).HasColumnName("opta_Id");

                entity.HasOne(d => d.Hoti)
                    .WithMany(p => p.TbHojaTiempoPorOptante)
                    .HasForeignKey(d => d.HotiId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbHojaTiempoPorOptante_Gest_tbHojaTiempo_hoti_Id");

                entity.HasOne(d => d.HotoUsuarioCreacionNavigation)
                    .WithMany(p => p.TbHojaTiempoPorOptanteHotoUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.HotoUsuarioCreacion)
                    .HasConstraintName("FK_tbHojaTiempoPorOptante_Accs_tbUsuarios_hoto_UsuarioCreacion");

                entity.HasOne(d => d.HotoUsuarioModificacionNavigation)
                    .WithMany(p => p.TbHojaTiempoPorOptanteHotoUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.HotoUsuarioModificacion)
                    .HasConstraintName("FK_tbHojaTiempoPorOptante_Accs_tbUsuarios_hoto_UsuarioModificacion");

                entity.HasOne(d => d.Opta)
                    .WithMany(p => p.TbHojaTiempoPorOptante)
                    .HasForeignKey(d => d.OptaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbHojaTiempoPorOptante_Gest_tbOptantes_opta_Id");
            });

            modelBuilder.Entity<TbHojaTiempoPorOptanteBitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbHojaTiempoPorOptanteBitacora", "Gest");

                entity.Property(e => e.HotiAprobada).HasColumnName("hoti_Aprobada");

                entity.Property(e => e.HotiId).HasColumnName("hoti_Id");

                entity.Property(e => e.HotoAccion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("hoto_Accion")
                    .IsFixedLength(true);

                entity.Property(e => e.HotoEstado).HasColumnName("hoto_Estado");

                entity.Property(e => e.HotoFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("hoto_FechaCreacion");

                entity.Property(e => e.HotoFechaEliminado)
                    .HasColumnType("datetime")
                    .HasColumnName("hoto_FechaEliminado");

                entity.Property(e => e.HotoFechaHoraEntrega)
                    .HasColumnType("datetime")
                    .HasColumnName("hoto_FechaHoraEntrega");

                entity.Property(e => e.HotoFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("hoto_FechaModificacion");

                entity.Property(e => e.HotoHorasTotalesRealizadas)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("hoto_HorasTotalesRealizadas");

                entity.Property(e => e.HotoId).HasColumnName("hoto_Id");

                entity.Property(e => e.HotoUsuarioCreacion).HasColumnName("hoto_UsuarioCreacion");

                entity.Property(e => e.HotoUsuarioEliminado).HasColumnName("hoto_UsuarioEliminado");

                entity.Property(e => e.HotoUsuarioModificacion).HasColumnName("hoto_UsuarioModificacion");

                entity.Property(e => e.OptaId).HasColumnName("opta_Id");

                entity.Property(e => e.OtoComentario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("oto_Comentario");
            });

            modelBuilder.Entity<TbModulos>(entity =>
            {
                entity.HasKey(e => e.ModuId)
                    .HasName("PK__tbModulo__6F3FB45DA2109B01");

                entity.ToTable("tbModulos", "Accs");

                entity.HasIndex(e => e.ModuUrlModulo, "UQ__tbModulo__3061E23DA7E88771")
                    .IsUnique();

                entity.HasIndex(e => e.ModuDescripcionModulo, "UQ__tbModulo__846D0391369F2D2B")
                    .IsUnique();

                entity.HasIndex(e => e.ModuDescripcionModulo, "UQ_tbModulos_modu_DescripcionModulo")
                    .IsUnique();

                entity.Property(e => e.ModuId).HasColumnName("modu_Id");

                entity.Property(e => e.ModuDescripcionModulo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("modu_DescripcionModulo");

                entity.Property(e => e.ModuEstado)
                    .HasColumnName("modu_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModuFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("modu_FechaCreacion");

                entity.Property(e => e.ModuFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("modu_FechaModificacion");

                entity.Property(e => e.ModuUrlModulo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("modu_UrlModulo");

                entity.Property(e => e.ModuUsuarioCreacion).HasColumnName("modu_UsuarioCreacion");

                entity.Property(e => e.ModuUsuarioModificacion).HasColumnName("modu_UsuarioModificacion");

                entity.HasOne(d => d.ModuUsuarioCreacionNavigation)
                    .WithMany(p => p.TbModulosModuUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.ModuUsuarioCreacion)
                    .HasConstraintName("FK_tbModulos_Accs_tbUsuarios_modu_UsuarioCreacion");

                entity.HasOne(d => d.ModuUsuarioModificacionNavigation)
                    .WithMany(p => p.TbModulosModuUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.ModuUsuarioModificacion)
                    .HasConstraintName("FK_tbModulos_Accs_tbUsuarios_modu_UsuarioModificacion");
            });

            modelBuilder.Entity<TbModulosPorRoles>(entity =>
            {
                entity.HasKey(e => e.MoroId)
                    .HasName("PK__tbModulo__FB7C532B195A4C56");

                entity.ToTable("tbModulosPorRoles", "Accs");

                entity.Property(e => e.MoroId).HasColumnName("moro_Id");

                entity.Property(e => e.ModuId).HasColumnName("modu_Id");

                entity.Property(e => e.RoleId).HasColumnName("role_Id");

                entity.HasOne(d => d.Modu)
                    .WithMany(p => p.TbModulosPorRoles)
                    .HasForeignKey(d => d.ModuId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.TbModulosPorRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TbMunicipios>(entity =>
            {
                entity.HasKey(e => e.MuniId)
                    .HasName("PK_tbMunicipios_muni_Id");

                entity.ToTable("tbMunicipios", "Gral");

                entity.HasIndex(e => e.MuniDescripcionMunicipio, "UQ__tbMunici__34A349564A3D2700")
                    .IsUnique();

                entity.Property(e => e.MuniId)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("muni_Id");

                entity.Property(e => e.DepaId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("depa_Id");

                entity.Property(e => e.MuniDescripcionMunicipio)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("muni_DescripcionMunicipio");

                entity.Property(e => e.MuniEstado)
                    .HasColumnName("muni_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MuniFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("muni_FechaCreacion");

                entity.Property(e => e.MuniFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("muni_FechaModificacion");

                entity.Property(e => e.MuniUsuarioCreacion).HasColumnName("muni_UsuarioCreacion");

                entity.Property(e => e.MuniUsuarioModificacion).HasColumnName("muni_UsuarioModificacion");

                entity.HasOne(d => d.Depa)
                    .WithMany(p => p.TbMunicipios)
                    .HasForeignKey(d => d.DepaId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.MuniUsuarioCreacionNavigation)
                    .WithMany(p => p.TbMunicipiosMuniUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.MuniUsuarioCreacion)
                    .HasConstraintName("FK_tbMunicipios_Accs_tbUsuarios_muni_UsuarioCreacion");

                entity.HasOne(d => d.MuniUsuarioModificacionNavigation)
                    .WithMany(p => p.TbMunicipiosMuniUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.MuniUsuarioModificacion)
                    .HasConstraintName("FK_tbMunicipios_Accs_tbUsuarios_muni_UsuarioModificacion");
            });

            modelBuilder.Entity<TbNotificaciones>(entity =>
            {
                entity.HasKey(e => e.NotiId);

                entity.ToTable("tbNotificaciones", "Comm");

                entity.Property(e => e.NotiId).HasColumnName("noti_Id");

                entity.Property(e => e.NotiDescripcion)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("noti_Descripcion");

                entity.Property(e => e.NotiEstado).HasColumnName("noti_Estado");

                entity.Property(e => e.NotiFecha)
                    .HasColumnType("datetime")
                    .HasColumnName("noti_Fecha");

                entity.Property(e => e.NotiFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("noti_FechaCreacion");

                entity.Property(e => e.NotiFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("noti_FechaModificacion");

                entity.Property(e => e.NotiRuta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("noti_Ruta");

                entity.Property(e => e.NotiUsuarioCreacion).HasColumnName("noti_UsuarioCreacion");

                entity.Property(e => e.NotiUsuarioModificacion).HasColumnName("noti_UsuarioModificacion");

                entity.HasOne(d => d.NotiUsuarioCreacionNavigation)
                    .WithMany(p => p.TbNotificacionesNotiUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.NotiUsuarioCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbNotificaciones_Accs_tbUsuarios_noti_UsuarioCreacion");

                entity.HasOne(d => d.NotiUsuarioModificacionNavigation)
                    .WithMany(p => p.TbNotificacionesNotiUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.NotiUsuarioModificacion)
                    .HasConstraintName("FK_tbNotificaciones_Accs_tbUsuarios_noti_UsuarioModificacion");
            });

            modelBuilder.Entity<TbNotificacionesPorUsuario>(entity =>
            {
                entity.HasKey(e => e.NapuId);

                entity.ToTable("tbNotificacionesPorUsuario", "Comm");

                entity.Property(e => e.NapuId).HasColumnName("napu_Id");

                entity.Property(e => e.NapuAlertaOnoti).HasColumnName("napu_AlertaOnoti");

                entity.Property(e => e.NapuAlertaOnotiId).HasColumnName("napu_AlertaONoti_Id");

                entity.Property(e => e.NapuEstado).HasColumnName("napu_Estado");

                entity.Property(e => e.NapuFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("napu_FechaCreacion");

                entity.Property(e => e.NapuFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("napu_FechaModificacion");

                entity.Property(e => e.NapuLeida).HasColumnName("napu_Leida");

                entity.Property(e => e.NapuRuta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("napu_Ruta");

                entity.Property(e => e.NapuUsuarioCreacion).HasColumnName("napu_UsuarioCreacion");

                entity.Property(e => e.NapuUsuarioModificacion).HasColumnName("napu_UsuarioModificacion");

                entity.Property(e => e.UsuaId).HasColumnName("usua_Id");

                entity.HasOne(d => d.NapuUsuarioCreacionNavigation)
                    .WithMany(p => p.TbNotificacionesPorUsuarioNapuUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.NapuUsuarioCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbNotificacionesPorUsuario_Accs_tbUsuarios_napu_UsuarioCreacion");

                entity.HasOne(d => d.NapuUsuarioModificacionNavigation)
                    .WithMany(p => p.TbNotificacionesPorUsuarioNapuUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.NapuUsuarioModificacion)
                    .HasConstraintName("FK_tbNotificacionesPorUsuario_Accs_tbUsuarios_napu_UsuarioModificacion");

                entity.HasOne(d => d.Usua)
                    .WithMany(p => p.TbNotificacionesPorUsuarioUsua)
                    .HasForeignKey(d => d.UsuaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbNotificacionesPorUsuario_Accs_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<TbOpcionesPorPregunta>(entity =>
            {
                entity.HasKey(e => e.OpprId)
                    .HasName("PK__tbOpcion__32A5707FE194FF8D");

                entity.ToTable("tbOpcionesPorPregunta", "Gest");

                entity.Property(e => e.OpprId).HasColumnName("oppr_Id");

                entity.Property(e => e.OpprEsRespuesta).HasColumnName("oppr_EsRespuesta");

                entity.Property(e => e.OpprNombreOpcion)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("oppr_NombreOpcion");

                entity.Property(e => e.PrcuId).HasColumnName("prcu_Id");

                entity.HasOne(d => d.Prcu)
                    .WithMany(p => p.TbOpcionesPorPregunta)
                    .HasForeignKey(d => d.PrcuId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TbOptantes>(entity =>
            {
                entity.HasKey(e => e.OptaId)
                    .HasName("PK__tbOptant__791B3329B02BB7FE");

                entity.ToTable("tbOptantes", "Gest");

                entity.HasIndex(e => e.OptaDni, "UQ__tbOptant__659E8FD0D910C988")
                    .IsUnique();

                entity.HasIndex(e => e.OptaCorreoElectronico, "UQ__tbOptant__EE5007D46B9DBF17")
                    .IsUnique();

                entity.Property(e => e.OptaId).HasColumnName("opta_Id");

                entity.Property(e => e.BancId).HasColumnName("banc_Id");

                entity.Property(e => e.CafrId).HasColumnName("cafr_Id");

                entity.Property(e => e.CiviId).HasColumnName("civi_Id");

                entity.Property(e => e.CompId).HasColumnName("comp_Id");

                entity.Property(e => e.MuniId)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("muni_Id");

                entity.Property(e => e.OptaCorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("opta_CorreoElectronico");

                entity.Property(e => e.OptaCuentaBancaria)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("opta_CuentaBancaria");

                entity.Property(e => e.OptaDireccion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("opta_Direccion");

                entity.Property(e => e.OptaDni)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("opta_DNI");

                entity.Property(e => e.OptaEstado)
                    .HasColumnName("opta_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OptaFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("opta_FechaCreacion");

                entity.Property(e => e.OptaFechaFin)
                    .HasColumnType("date")
                    .HasColumnName("opta_FechaFin");

                entity.Property(e => e.OptaFechaInicio)
                    .HasColumnType("date")
                    .HasColumnName("opta_FechaInicio");

                entity.Property(e => e.OptaFechamodificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("opta_Fechamodificacion");

                entity.Property(e => e.OptaImagen)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("opta_Imagen");

                entity.Property(e => e.OptaObservacion)
                    .IsUnicode(false)
                    .HasColumnName("opta_Observacion");

                entity.Property(e => e.OptaOptanteAceptado).HasColumnName("opta_OptanteAceptado");

                entity.Property(e => e.OptaPrimerApellido)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("opta_PrimerApellido");

                entity.Property(e => e.OptaPrimerNombre)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("opta_PrimerNombre");

                entity.Property(e => e.OptaSegundoApellido)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("opta_SegundoApellido");

                entity.Property(e => e.OptaSegundoNombre)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("opta_SegundoNombre");

                entity.Property(e => e.OptaSexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("opta_Sexo");

                entity.Property(e => e.OptaTelefono1)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("opta_Telefono1");

                entity.Property(e => e.OptaTelefono2)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("opta_Telefono2");

                entity.Property(e => e.OptaTipoPago).HasColumnName("opta_TipoPago");

                entity.Property(e => e.OptaUsuarioCreacion).HasColumnName("opta_UsuarioCreacion");

                entity.Property(e => e.OptaUsuarioModificacion).HasColumnName("opta_UsuarioModificacion");

                entity.Property(e => e.TisaId).HasColumnName("tisa_Id");

                entity.HasOne(d => d.Banc)
                    .WithMany(p => p.TbOptantes)
                    .HasForeignKey(d => d.BancId)
                    .HasConstraintName("FK_tbOptantes_Gral_tbBancos_banc_Id");

                entity.HasOne(d => d.Cafr)
                    .WithMany(p => p.TbOptantes)
                    .HasForeignKey(d => d.CafrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbOptantes_Gral_tbCarreraPorFacultadPorRegional_cafr_Id");

                entity.HasOne(d => d.Civi)
                    .WithMany(p => p.TbOptantes)
                    .HasForeignKey(d => d.CiviId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbOptantes_Gral_tbEstadosCiviles_civi_Id");

                entity.HasOne(d => d.Comp)
                    .WithMany(p => p.TbOptantes)
                    .HasForeignKey(d => d.CompId);

                entity.HasOne(d => d.Muni)
                    .WithMany(p => p.TbOptantes)
                    .HasForeignKey(d => d.MuniId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbOptantes_Gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.OptaUsuarioCreacionNavigation)
                    .WithMany(p => p.TbOptantesOptaUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.OptaUsuarioCreacion)
                    .HasConstraintName("FK_tbOptantes_Accs_tbUsuarios_opta_UsuarioCreacion");

                entity.HasOne(d => d.OptaUsuarioModificacionNavigation)
                    .WithMany(p => p.TbOptantesOptaUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.OptaUsuarioModificacion)
                    .HasConstraintName("FK_tbOptantes_Accs_tbUsuarios_opta_UsuarioModificacion");

                entity.HasOne(d => d.Tisa)
                    .WithMany(p => p.TbOptantes)
                    .HasForeignKey(d => d.TisaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbOptantes_Gral_tbTipoSangre_tisa_Id");
            });

            modelBuilder.Entity<TbOptantesBitacora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbOptantesBitacora", "Gest");

                entity.Property(e => e.BancId).HasColumnName("banc_Id");

                entity.Property(e => e.CafrId).HasColumnName("cafr_Id");

                entity.Property(e => e.CiviId).HasColumnName("civi_Id");

                entity.Property(e => e.CompId).HasColumnName("comp_Id");

                entity.Property(e => e.MuniId)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("muni_Id");

                entity.Property(e => e.OptaAccion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("opta_Accion")
                    .IsFixedLength(true);

                entity.Property(e => e.OptaCorreoElectronico)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("opta_CorreoElectronico");

                entity.Property(e => e.OptaCuentaBancaria)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("opta_CuentaBancaria");

                entity.Property(e => e.OptaDireccion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("opta_Direccion");

                entity.Property(e => e.OptaDni)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("opta_DNI");

                entity.Property(e => e.OptaEstado).HasColumnName("opta_Estado");

                entity.Property(e => e.OptaFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("opta_FechaCreacion");

                entity.Property(e => e.OptaFechaEliminado)
                    .HasColumnType("datetime")
                    .HasColumnName("opta_FechaEliminado");

                entity.Property(e => e.OptaFechaFin)
                    .HasColumnType("date")
                    .HasColumnName("opta_FechaFin");

                entity.Property(e => e.OptaFechaInicio)
                    .HasColumnType("date")
                    .HasColumnName("opta_FechaInicio");

                entity.Property(e => e.OptaFechamodificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("opta_Fechamodificacion");

                entity.Property(e => e.OptaId).HasColumnName("opta_Id");

                entity.Property(e => e.OptaImagen)
                    .IsUnicode(false)
                    .HasColumnName("opta_Imagen");

                entity.Property(e => e.OptaObservacion)
                    .IsUnicode(false)
                    .HasColumnName("opta_Observacion");

                entity.Property(e => e.OptaOptanteAceptado).HasColumnName("opta_OptanteAceptado");

                entity.Property(e => e.OptaPrimerApellido)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("opta_PrimerApellido");

                entity.Property(e => e.OptaPrimerNombre)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("opta_PrimerNombre");

                entity.Property(e => e.OptaSegundoApellido)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("opta_SegundoApellido");

                entity.Property(e => e.OptaSegundoNombre)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("opta_SegundoNombre");

                entity.Property(e => e.OptaSexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("opta_Sexo");

                entity.Property(e => e.OptaTelefono1)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("opta_Telefono1");

                entity.Property(e => e.OptaTelefono2)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("opta_Telefono2");

                entity.Property(e => e.OptaTipoPago).HasColumnName("opta_TipoPago");

                entity.Property(e => e.OptaUsuarioCreacion).HasColumnName("opta_UsuarioCreacion");

                entity.Property(e => e.OptaUsuarioEliminado).HasColumnName("opta_UsuarioEliminado");

                entity.Property(e => e.OptaUsuarioModificacion).HasColumnName("opta_UsuarioModificacion");

                entity.Property(e => e.TisaId).HasColumnName("tisa_Id");
            });

            modelBuilder.Entity<TbPreguntasFrecuentes>(entity =>
            {
                entity.HasKey(e => e.PrfrId)
                    .HasName("PK__tbPregun__B5C22C499239DC28");

                entity.ToTable("tbPreguntasFrecuentes", "Comm");

                entity.HasIndex(e => e.PrfrPregunta, "UQ_tbPreguntasFrecuentes_prfr_Pregunta")
                    .IsUnique();

                entity.Property(e => e.PrfrId).HasColumnName("prfr_Id");

                entity.Property(e => e.PrfrEstado).HasColumnName("prfr_Estado");

                entity.Property(e => e.PrfrFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("prfr_FechaCreacion");

                entity.Property(e => e.PrfrFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("prfr_FechaModificacion");

                entity.Property(e => e.PrfrPregunta)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("prfr_Pregunta");

                entity.Property(e => e.PrfrRespuesta)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("prfr_Respuesta");

                entity.Property(e => e.PrfrUsuarioCreacion).HasColumnName("prfr_UsuarioCreacion");

                entity.Property(e => e.PrfrUsuarioModificacion).HasColumnName("prfr_UsuarioModificacion");

                entity.HasOne(d => d.PrfrUsuarioCreacionNavigation)
                    .WithMany(p => p.TbPreguntasFrecuentesPrfrUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.PrfrUsuarioCreacion)
                    .HasConstraintName("FK_tbPreguntasFrecuentes_Accs_tbUsuarios_prfr_UsuarioCreacion");

                entity.HasOne(d => d.PrfrUsuarioModificacionNavigation)
                    .WithMany(p => p.TbPreguntasFrecuentesPrfrUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.PrfrUsuarioModificacion)
                    .HasConstraintName("FK_tbPreguntasFrecuentes_Accs_tbUsuarios_prfr_UsuarioModificacion");
            });

            modelBuilder.Entity<TbPreguntasPorCuestionario>(entity =>
            {
                entity.HasKey(e => e.PrcuId)
                    .HasName("PK__tbPregun__32C2967A884DB2F3");

                entity.ToTable("tbPreguntasPorCuestionario", "Gest");

                entity.Property(e => e.PrcuId).HasColumnName("prcu_Id");

                entity.Property(e => e.CuesId).HasColumnName("cues_Id");

                entity.Property(e => e.PrcuEsRespuestaBreve).HasColumnName("prcu_EsRespuestaBreve");

                entity.Property(e => e.PrcuPregunta)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("prcu_Pregunta");

                entity.Property(e => e.PrcuPuntuacion)
                    .HasColumnType("decimal(2, 1)")
                    .HasColumnName("prcu_Puntuacion");

                entity.HasOne(d => d.Cues)
                    .WithMany(p => p.TbPreguntasPorCuestionario)
                    .HasForeignKey(d => d.CuesId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TbProyectos>(entity =>
            {
                entity.HasKey(e => e.PrytId)
                    .HasName("PK__tbProyec__3AB3C03AB5B93CC9");

                entity.ToTable("tbProyectos", "Gest");

                entity.HasIndex(e => e.PrytDescripcionProyecto, "UQ__tbProyec__7ECE41F76EDD43EA")
                    .IsUnique();

                entity.Property(e => e.PrytId).HasColumnName("pryt_Id");

                entity.Property(e => e.EmprId).HasColumnName("empr_Id");

                entity.Property(e => e.PrytDescripcionProyecto)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("pryt_DescripcionProyecto");

                entity.Property(e => e.PrytEstado)
                    .HasColumnName("pryt_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrytFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("pryt_FechaCreacion");

                entity.Property(e => e.PrytFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("pryt_FechaModificacion");

                entity.Property(e => e.PrytHorasProceso)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("pryt_HorasProceso");

                entity.Property(e => e.PrytUsuarioCreacion).HasColumnName("pryt_UsuarioCreacion");

                entity.Property(e => e.PrytUsuarioModificacion).HasColumnName("pryt_UsuarioModificacion");

                entity.HasOne(d => d.Empr)
                    .WithMany(p => p.TbProyectos)
                    .HasForeignKey(d => d.EmprId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.PrytUsuarioCreacionNavigation)
                    .WithMany(p => p.TbProyectosPrytUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.PrytUsuarioCreacion)
                    .HasConstraintName("FK_tbProyectos_Accs_tbUsuarios_pryt_UsuarioCreacion");

                entity.HasOne(d => d.PrytUsuarioModificacionNavigation)
                    .WithMany(p => p.TbProyectosPrytUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.PrytUsuarioModificacion)
                    .HasConstraintName("FK_tbProyectos_Accs_tbUsuarios_pryt_UsuarioModificacion");
            });

            modelBuilder.Entity<TbPuestos>(entity =>
            {
                entity.HasKey(e => e.PustId)
                    .HasName("PK__tbPuesto__671B89653E55E08E");

                entity.ToTable("tbPuestos", "Gral");

                entity.HasIndex(e => e.PustDescripcionPuesto, "UQ__tbPuesto__927C93499CD7F6E4")
                    .IsUnique();

                entity.Property(e => e.PustId).HasColumnName("pust_Id");

                entity.Property(e => e.PustDescripcionPuesto)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pust_DescripcionPuesto");

                entity.Property(e => e.PustEstado)
                    .HasColumnName("pust_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PustFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("pust_FechaCreacion");

                entity.Property(e => e.PustFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("pust_FechaModificacion");

                entity.Property(e => e.PustUsuarioCreacion).HasColumnName("pust_UsuarioCreacion");

                entity.Property(e => e.PustUsuarioModificacion).HasColumnName("pust_UsuarioModificacion");

                entity.HasOne(d => d.PustUsuarioCreacionNavigation)
                    .WithMany(p => p.TbPuestosPustUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.PustUsuarioCreacion)
                    .HasConstraintName("FK_tbPuestos_Accs_tbUsuarios_pust_UsuarioCreacion");

                entity.HasOne(d => d.PustUsuarioModificacionNavigation)
                    .WithMany(p => p.TbPuestosPustUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.PustUsuarioModificacion)
                    .HasConstraintName("FK_tbPuestos_Accs_tbUsuarios_pust_UsuarioModificacion");
            });

            modelBuilder.Entity<TbRecibos>(entity =>
            {
                entity.HasKey(e => e.ReciId)
                    .HasName("PK__tbRecibo__50EBEE7EC10E9DF5");

                entity.ToTable("tbRecibos", "Gest");

                entity.Property(e => e.ReciId).HasColumnName("reci_Id");

                entity.Property(e => e.EmplId).HasColumnName("empl_Id");

                entity.Property(e => e.ReciCertificacion)
                    .IsUnicode(false)
                    .HasColumnName("reci_Certificacion");

                entity.Property(e => e.ReciEstado).HasColumnName("reci_Estado");

                entity.Property(e => e.ReciFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("reci_FechaCreacion");

                entity.Property(e => e.ReciFechaHoraLimite)
                    .HasColumnType("datetime")
                    .HasColumnName("reci_FechaHoraLimite");

                entity.Property(e => e.ReciFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("reci_FechaModificacion");

                entity.Property(e => e.ReciPara)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reci_Para");

                entity.Property(e => e.ReciPeriodoFinal)
                    .HasColumnType("date")
                    .HasColumnName("reci_PeriodoFinal");

                entity.Property(e => e.ReciPeriodoInicio)
                    .HasColumnType("date")
                    .HasColumnName("reci_PeriodoInicio");

                entity.Property(e => e.ReciUsuarioCreacion).HasColumnName("reci_UsuarioCreacion");

                entity.Property(e => e.ReciUsuarioModificacion).HasColumnName("reci_UsuarioModificacion");

                entity.HasOne(d => d.Empl)
                    .WithMany(p => p.TbRecibos)
                    .HasForeignKey(d => d.EmplId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbRecibos_Gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.ReciUsuarioCreacionNavigation)
                    .WithMany(p => p.TbRecibosReciUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.ReciUsuarioCreacion)
                    .HasConstraintName("FK_tbRecibos_Accs_tbUsuarios_reci_UsuarioCreacion");

                entity.HasOne(d => d.ReciUsuarioModificacionNavigation)
                    .WithMany(p => p.TbRecibosReciUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.ReciUsuarioModificacion)
                    .HasConstraintName("FK_tbRecibos_Accs_tbUsuarios_reci_UsuarioModificacion");
            });

            modelBuilder.Entity<TbRecibosPorOptante>(entity =>
            {
                entity.HasKey(e => e.ReopId)
                    .HasName("PK__tbRecibo__16161EE90A5E9CF2");

                entity.ToTable("tbRecibosPorOptante", "Gest");

                entity.Property(e => e.ReopId).HasColumnName("reop_Id");

                entity.Property(e => e.OptaId).HasColumnName("opta_Id");

                entity.Property(e => e.ReopDescripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reop_Descripcion");

                entity.Property(e => e.ReopHorasTotalesRealizadas)
                    .HasColumnType("decimal(2, 1)")
                    .HasColumnName("reop_HorasTotalesRealizadas");

                entity.Property(e => e.ReopPrecioUnitario)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("reop_PrecioUnitario");

                entity.Property(e => e.ReopTotal)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("reop_Total");

                entity.HasOne(d => d.Opta)
                    .WithMany(p => p.TbRecibosPorOptante)
                    .HasForeignKey(d => d.OptaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbRecibosPorPasante_tbOptantes_opta_Id");
            });

            modelBuilder.Entity<TbRegionalCorporativa>(entity =>
            {
                entity.HasKey(e => e.RecoId)
                    .HasName("PK__tbRegion__BA2965898F77D29B");

                entity.ToTable("tbRegionalCorporativa", "Gral");

                entity.HasIndex(e => e.RecoNombreRegionalCorportiva, "UQ_tbRegionalCorporativa_reco_NombreRegionalCorportiva")
                    .IsUnique();

                entity.Property(e => e.RecoId).HasColumnName("reco_Id");

                entity.Property(e => e.MuniId)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("muni_Id");

                entity.Property(e => e.RecoDireccionExacta)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reco_DireccionExacta");

                entity.Property(e => e.RecoEstado).HasColumnName("reco_Estado");

                entity.Property(e => e.RecoFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("reco_FechaCreacion");

                entity.Property(e => e.RecoFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("reco_FechaModificacion");

                entity.Property(e => e.RecoNombreRegionalCorportiva)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("reco_NombreRegionalCorportiva");

                entity.Property(e => e.RecoUsuarioCreacion).HasColumnName("reco_UsuarioCreacion");

                entity.Property(e => e.RecoUsuarioModificacion).HasColumnName("reco_UsuarioModificacion");

                entity.HasOne(d => d.Muni)
                    .WithMany(p => p.TbRegionalCorporativa)
                    .HasForeignKey(d => d.MuniId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.RecoUsuarioCreacionNavigation)
                    .WithMany(p => p.TbRegionalCorporativaRecoUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.RecoUsuarioCreacion)
                    .HasConstraintName("FK_tbRegionalCorporativa_Accs_tbUsuarios_reco_UsuarioCreacion");

                entity.HasOne(d => d.RecoUsuarioModificacionNavigation)
                    .WithMany(p => p.TbRegionalCorporativaRecoUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.RecoUsuarioModificacion)
                    .HasConstraintName("FK_tbRegionalCorporativa_Accs_tbUsuarios_UsuarioModificacion");
            });

            modelBuilder.Entity<TbRegionales>(entity =>
            {
                entity.HasKey(e => e.RegiId)
                    .HasName("PK__tbRegion__3E6FBD3079B8FB14");

                entity.ToTable("tbRegionales", "Gral");

                entity.HasIndex(e => e.RegiAbreviatura, "UQ__tbRegion__B4C8C711BB9CBBE6")
                    .IsUnique();

                entity.HasIndex(e => e.RegiDescripcionRegional, "UQ__tbRegion__EE1F886844309BA4")
                    .IsUnique();

                entity.Property(e => e.RegiId).HasColumnName("regi_Id");

                entity.Property(e => e.MuniId)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("muni_Id");

                entity.Property(e => e.RegiAbreviatura)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("regi_Abreviatura");

                entity.Property(e => e.RegiDescripcionRegional)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("regi_DescripcionRegional");

                entity.Property(e => e.RegiEstado)
                    .HasColumnName("regi_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RegiFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("regi_FechaCreacion");

                entity.Property(e => e.RegiFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("regi_FechaModificacion");

                entity.Property(e => e.RegiUsuarioCreacion).HasColumnName("regi_UsuarioCreacion");

                entity.Property(e => e.RegiUsuarioModificacion).HasColumnName("regi_UsuarioModificacion");

                entity.Property(e => e.UnivId).HasColumnName("univ_Id");

                entity.HasOne(d => d.Muni)
                    .WithMany(p => p.TbRegionales)
                    .HasForeignKey(d => d.MuniId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.RegiUsuarioCreacionNavigation)
                    .WithMany(p => p.TbRegionalesRegiUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.RegiUsuarioCreacion)
                    .HasConstraintName("FK_tbRegionales_Accs_tbUsuarios_regi_UsuarioCreacion");

                entity.HasOne(d => d.RegiUsuarioModificacionNavigation)
                    .WithMany(p => p.TbRegionalesRegiUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.RegiUsuarioModificacion)
                    .HasConstraintName("FK_tbRegionales_Accs_tbUsuarios_regi_UsuarioModificacion");

                entity.HasOne(d => d.Univ)
                    .WithMany(p => p.TbRegionales)
                    .HasForeignKey(d => d.UnivId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TbRespuestasPorOptante>(entity =>
            {
                entity.HasKey(e => e.CupaId)
                    .HasName("PK__tbRespue__3D4003BCCD05A9C7");

                entity.ToTable("tbRespuestasPorOptante", "Gest");

                entity.Property(e => e.CupaId).HasColumnName("cupa_Id");

                entity.Property(e => e.CupaFechaRealizado)
                    .HasColumnType("datetime")
                    .HasColumnName("cupa_FechaRealizado");

                entity.Property(e => e.CupaRespuesta)
                    .IsUnicode(false)
                    .HasColumnName("cupa_respuesta");

                entity.Property(e => e.OpprId).HasColumnName("oppr_Id");

                entity.Property(e => e.OptaId).HasColumnName("opta_Id");

                entity.HasOne(d => d.Oppr)
                    .WithMany(p => p.TbRespuestasPorOptante)
                    .HasForeignKey(d => d.OpprId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbRespuestasPorPasante_tbOpcionesPorPregunta_oppr_Id");

                entity.HasOne(d => d.Opta)
                    .WithMany(p => p.TbRespuestasPorOptante)
                    .HasForeignKey(d => d.OptaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbRespuestasPorPasante_tbOptantes_opta_Id");
            });

            modelBuilder.Entity<TbRoles>(entity =>
            {
                entity.HasKey(e => e.RoleId)
                    .HasName("PK__tbRoles__760F99A40BCF89F6");

                entity.ToTable("tbRoles", "Accs");

                entity.HasIndex(e => e.RoleDescripcionRol, "UQ__tbRoles__AC38D9C2C93A68A2")
                    .IsUnique();

                entity.HasIndex(e => e.RoleDescripcionRol, "UQ_tbRoles_role_DescripcionRol")
                    .IsUnique();

                entity.Property(e => e.RoleId).HasColumnName("role_Id");

                entity.Property(e => e.RoleDescripcionRol)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("role_DescripcionRol");

                entity.Property(e => e.RoleEstado)
                    .HasColumnName("role_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RoleFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("role_FechaCreacion");

                entity.Property(e => e.RoleFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("role_FechaModificacion");

                entity.Property(e => e.RoleUsuarioCreacion).HasColumnName("role_UsuarioCreacion");

                entity.Property(e => e.RoleUsuarioModificacion).HasColumnName("role_UsuarioModificacion");

                entity.HasOne(d => d.RoleUsuarioCreacionNavigation)
                    .WithMany(p => p.TbRolesRoleUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.RoleUsuarioCreacion);

                entity.HasOne(d => d.RoleUsuarioModificacionNavigation)
                    .WithMany(p => p.TbRolesRoleUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.RoleUsuarioModificacion);
            });

            modelBuilder.Entity<TbTipoDocumento>(entity =>
            {
                entity.HasKey(e => e.TidoId)
                    .HasName("PK__tbTipoDo__96BB82D2B107F041");

                entity.ToTable("tbTipoDocumento", "Gral");

                entity.HasIndex(e => e.TidoDescripcion, "UQ__tbTipoDo__10806C99CC6C583C")
                    .IsUnique();

                entity.Property(e => e.TidoId).HasColumnName("tido_Id");

                entity.Property(e => e.TidoDescripcion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("tido_Descripcion");

                entity.Property(e => e.TidoEstado)
                    .HasColumnName("tido_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TidoFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("tido_FechaCreacion");

                entity.Property(e => e.TidoFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("tido_FechaModificacion");

                entity.Property(e => e.TidoUsuarioCreacion).HasColumnName("tido_UsuarioCreacion");

                entity.Property(e => e.TidoUsuarioModificacion).HasColumnName("tido_UsuarioModificacion");

                entity.HasOne(d => d.TidoUsuarioCreacionNavigation)
                    .WithMany(p => p.TbTipoDocumentoTidoUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.TidoUsuarioCreacion)
                    .HasConstraintName("FK_tbTipoDocumento_Accs_tbUsuarios_tido_UsuarioCreacion");

                entity.HasOne(d => d.TidoUsuarioModificacionNavigation)
                    .WithMany(p => p.TbTipoDocumentoTidoUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.TidoUsuarioModificacion)
                    .HasConstraintName("FK_tbTipoDocumento_Accs_tbUsuarios_tido_UsuarioModificacion");
            });

            modelBuilder.Entity<TbTipoSangre>(entity =>
            {
                entity.HasKey(e => e.TisaId)
                    .HasName("PK__tbTipoSa__A56FCB2B1CB5F284");

                entity.ToTable("tbTipoSangre", "Gral");

                entity.HasIndex(e => e.TisaDescripcion, "UQ_tbTipoSangre_tisa_Descripcion")
                    .IsUnique();

                entity.Property(e => e.TisaId).HasColumnName("tisa_Id");

                entity.Property(e => e.TisaDescripcion)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("tisa_Descripcion");

                entity.Property(e => e.TisaEstado).HasColumnName("tisa_Estado");

                entity.Property(e => e.TisaFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("tisa_FechaCreacion");

                entity.Property(e => e.TisaFechamodificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("tisa_Fechamodificacion");

                entity.Property(e => e.TisaUsuarioCreacion).HasColumnName("tisa_UsuarioCreacion");

                entity.Property(e => e.TisaUsuarioModificacion).HasColumnName("tisa_UsuarioModificacion");

                entity.HasOne(d => d.TisaUsuarioCreacionNavigation)
                    .WithMany(p => p.TbTipoSangreTisaUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.TisaUsuarioCreacion)
                    .HasConstraintName("FK_tbTipoSangre_Accs_tbUsuarios_tisa_UsuarioCreacion");

                entity.HasOne(d => d.TisaUsuarioModificacionNavigation)
                    .WithMany(p => p.TbTipoSangreTisaUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.TisaUsuarioModificacion)
                    .HasConstraintName("FK_tbTipoSangre_Accs_tbUsuarios_tisa_UsuarioModificacion");
            });

            modelBuilder.Entity<TbTokens>(entity =>
            {
                entity.HasKey(e => e.ToknId);

                entity.ToTable("tbTokens", "Comm");

                entity.Property(e => e.ToknId).HasColumnName("tokn_Id");

                entity.Property(e => e.ToknJsonToken)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("tokn_JsonToken");

                entity.Property(e => e.ToknSesionWeb).HasColumnName("tokn_SesionWeb");

                entity.Property(e => e.UsuaId).HasColumnName("usua_Id");

                entity.HasOne(d => d.Usua)
                    .WithMany(p => p.TbTokens)
                    .HasForeignKey(d => d.UsuaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbTokens_Accs_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<TbUniversidades>(entity =>
            {
                entity.HasKey(e => e.UnivId)
                    .HasName("PK__tbUniver__A2187E09169D0807");

                entity.ToTable("tbUniversidades", "Gral");

                entity.HasIndex(e => e.UnivDescripcionUniversidad, "UQ__tbUniver__5983CA8A66D84324")
                    .IsUnique();

                entity.HasIndex(e => e.UnivAbreviatura, "UQ__tbUniver__C90F8EAA505E7389")
                    .IsUnique();

                entity.Property(e => e.UnivId).HasColumnName("univ_Id");

                entity.Property(e => e.UnivAbreviatura)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("univ_Abreviatura");

                entity.Property(e => e.UnivDescripcionUniversidad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("univ_DescripcionUniversidad");

                entity.Property(e => e.UnivEstado)
                    .HasColumnName("univ_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UnivFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("univ_FechaCreacion");

                entity.Property(e => e.UnivFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("univ_FechaModificacion");

                entity.Property(e => e.UnivUsuarioCreacion).HasColumnName("univ_UsuarioCreacion");

                entity.Property(e => e.UnivUsuarioModificacion).HasColumnName("univ_UsuarioModificacion");

                entity.HasOne(d => d.UnivUsuarioCreacionNavigation)
                    .WithMany(p => p.TbUniversidadesUnivUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.UnivUsuarioCreacion)
                    .HasConstraintName("FK_tbUniversidades_Accs_tbUsuarios_univ_UsuarioCreacion");

                entity.HasOne(d => d.UnivUsuarioModificacionNavigation)
                    .WithMany(p => p.TbUniversidadesUnivUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.UnivUsuarioModificacion)
                    .HasConstraintName("FK_tbUniversidades_Accs_tbUsuarios_univ_UsuarioModificacion");
            });

            modelBuilder.Entity<TbUsuarios>(entity =>
            {
                entity.HasKey(e => e.UsuaId)
                    .HasName("PK__tbUsuari__E863C8EE50DC118D");

                entity.ToTable("tbUsuarios", "Accs");

                entity.HasIndex(e => e.UsuaUsuario, "UQ__tbUsuari__9ED44AB45D2A9E8B")
                    .IsUnique();

                entity.HasIndex(e => e.UsuaUsuario, "UQ_usua_Usuario")
                    .IsUnique();

                entity.Property(e => e.UsuaId).HasColumnName("usua_Id");

                entity.Property(e => e.EmopId).HasColumnName("emop_Id");

                entity.Property(e => e.RoleId).HasColumnName("role_Id");

                entity.Property(e => e.UsuaAdministrador).HasColumnName("usua_Administrador");

                entity.Property(e => e.UsuaContraseña)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("usua_Contraseña");

                entity.Property(e => e.UsuaEsOptante).HasColumnName("usua_EsOptante");

                entity.Property(e => e.UsuaEstado)
                    .HasColumnName("usua_Estado")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UsuaFechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("usua_FechaCreacion");

                entity.Property(e => e.UsuaFechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("usua_FechaModificacion");

                entity.Property(e => e.UsuaUsuario)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("usua_Usuario");

                entity.Property(e => e.UsuaUsuarioCreacion).HasColumnName("usua_UsuarioCreacion");

                entity.Property(e => e.UsuaUsuarioModificacion).HasColumnName("usua_UsuarioModificacion");

                entity.HasOne(d => d.UsuaUsuarioCreacionNavigation)
                    .WithMany(p => p.InverseUsuaUsuarioCreacionNavigation)
                    .HasForeignKey(d => d.UsuaUsuarioCreacion)
                    .HasConstraintName("FK_tbUsuarios_usua_UsuarioCreacion");

                entity.HasOne(d => d.UsuaUsuarioModificacionNavigation)
                    .WithMany(p => p.InverseUsuaUsuarioModificacionNavigation)
                    .HasForeignKey(d => d.UsuaUsuarioModificacion)
                    .HasConstraintName("FK_tbUsuarios_usua_UsuarioModificacion");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}